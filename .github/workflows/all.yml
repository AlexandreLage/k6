name: Deps, Lint, Test, Build, Publish
on:
  push:
    branches:
      - master

    tags:
      - v*

  pull_request:

env:
  APP_NAME: "k6"
  DOCKER_IMAGE_ID: "loadimpact/k6"

jobs:
  deps:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./src/github.com/${{ github.repository }}
    env:
        GOPATH: ${{ github.workspace }}
        GO111MODULE: off
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.14.x
      - name: Check dependencies
        run: |
            go version
            export PATH="$GOPATH/bin:$PATH"
            mkdir -p "$GOPATH/bin"
            curl --fail https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep version
            dep status
            case $(dep ensure 2>&1 | head -n 1) in Warning*) false ;; esac
            dep check

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Lint
        uses: blackboard-innersource/gh-action-golangci-lint@v1
        with:
          version: 1.29.0
          checksum: 98b1eb7c74766079e1deebc3388c13db9bfa9fa0769046d786cf8d1553d7d68b

  test:
    strategy:
      matrix:
        go-version: [1.13.x, 1.14.x]
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    defaults:
      run:
        shell: bash
        working-directory: ./src/github.com/${{ github.repository }}
    env:
        GOPATH: ${{ github.workspace }}
        GO111MODULE: off
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Run tests with code coverage
        run: |
          go version
          export GOMAXPROCS=2
          export PATH=$GOPATH/bin:$PATH
          echo "mode: set" > coverage.txt
          for pkg in $(go list ./... | grep -v vendor); do
              list=$(go list -test -f  '{{ join .Deps  "\n"}}' $pkg | grep github.com/loadimpact/k6 | grep -v vendor || true)
              if [ -n "$list" ]; then
                  list=$(echo "$list" | cut -f1 -d ' ' | sort -u | paste -sd,)
              fi

              go test -race -timeout 800s  --coverpkg="$list" -coverprofile=$(echo $pkg | tr / -).coverage $pkg
          done
          grep -h -v "^mode:" *.coverage >> coverage.txt
          rm -f *.coverage
          bash <(curl --fail -s https://codecov.io/bash)
      - name: Generate coverage report
        run: go tool cover -html=coverage.txt -o coverage.html
      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: test-coverage-report
          path: coverage.html

  docker:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build
        run: docker build -t $DOCKER_IMAGE_ID .
      - name: Check
        run: |
            docker run $DOCKER_IMAGE_ID version
            docker run $DOCKER_IMAGE_ID --help
            docker run $DOCKER_IMAGE_ID help
            docker run $DOCKER_IMAGE_ID run --help
            docker run $DOCKER_IMAGE_ID inspect --help
            docker run $DOCKER_IMAGE_ID status --help
            docker run $DOCKER_IMAGE_ID stats --help
            docker run $DOCKER_IMAGE_ID scale --help
            docker run $DOCKER_IMAGE_ID pause --help
            docker run $DOCKER_IMAGE_ID resume --help
      - name: Publish
        if: github.event_name != 'pull_request'
        run: |
          echo "REF=${{ github.ref }}"
          echo "DOCKER_IMAGE_ID=$DOCKER_IMAGE_ID"
          #
          # Log into registry
          echo "${{ secrets.DOCKER_PASS }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo "$VERSION" | sed -e 's/^v//')
          echo "VERSION=$VERSION"
          docker tag image "$DOCKER_IMAGE_ID:$VERSION"
          docker push "$DOCKER_IMAGE_ID:$VERSION"
          # We also want to tag the latest stable version as latest
          if [[ "$VERSION" != "master" ]] && [[ ! "$VERSION" =~ (RC|rc) ]]; then
            docker tag image "$DOCKER_IMAGE_ID:latest"
            docker push "$DOCKER_IMAGE_ID:latest"
          fi

  release:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: startsWith(github.ref, 'refs/tags/v')
    defaults:
      run:
        shell: bash
        working-directory: ./src/github.com/${{ github.repository }}
    env:
        GOPATH: ${{ github.workspace }}
        GO111MODULE: off
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.14.x
      - name: Print used Go version
        run: go version
        # TODO: Run build-release.sh here
      - name: Build
        run: |
          export PATH=$GOPATH/bin:$PATH

          go get github.com/Masterminds/glide
          go get -d github.com/mh-cbon/go-bin-deb \
            && cd $GOPATH/src/github.com/mh-cbon/go-bin-deb \
            && glide install \
            && go install

          go get -d github.com/mh-cbon/go-bin-rpm \
            && cd $GOPATH/src/github.com/mh-cbon/go-bin-rpm \
            && glide install \
            && go install

          sudo apt-get update -y
          sudo apt-get install -y fakeroot rpm

          cd $GOPATH/src/github.com/loadimpact/$APP_NAME

          echo "Building k6..."
          CGO_ENABLED=0 GOARCH=amd64 go build -a -trimpath -ldflags "-s -w -X github.com/loadimpact/$APP_NAME/lib/consts.VersionDetails=$(date -u +"%FT%T%z")/$(git describe --always --long --dirty)" -o /tmp/$APP_NAME
          echo "Done!"

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo "$VERSION" | sed -e 's/^v//')
          export VERSION
          ./packaging/gen-packages.sh
      - name: Archive
        run: |
          tar -zcf "dist/$APP_NAME.tar.gz" "$APP_NAME"
      - name: Upload Build
        uses: actions/upload-artifact@v2
        with:
          name: k6-build
          path: dist/
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Debug dist dir
        run: |
          ls -al ./dist/
          # TODO: Multiple assets can't be easily uploaded using the official action.
          # https://github.com/actions/upload-release-asset/issues/28
          # Maybe switch to hub? https://github.com/actions/upload-release-asset/issues/28#issuecomment-617208601
          # Or this action?: https://github.com/meeDamian/github-release
      # - uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: dist/...
      #     asset_name:
      #     asset_content_type: application/gzip
